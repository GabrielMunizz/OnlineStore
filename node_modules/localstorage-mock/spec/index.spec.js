import { expect, assert } from 'chai';
import localStorageMock from '../src/index';

describe('localStorageMock', () => {
  beforeEach(() => {
    localStorageMock.clear()
  });

  it('by default exports the localStorage mock object', () => {
    expect(localStorageMock).to.be.an('object');
  });

  it('has an empty `items` object property', () => {
    expect(localStorageMock.items).to.eql({});
  });

  it('has a @length property equal to 0', () => {
    expect(localStorageMock.length).to.eql(0);
  });

  describe('#getItem', () => {
    it('throws an error if {key} is not provided', () => {
      const fn = () => {
        localStorageMock.getItem();
      };

      expect(fn).to.throw(
        TypeError,
        /1 argument required, but only 0 present/
      )
    });

    context('when passed a valid key', () => {
      it('returns the associated value', () => {
        localStorageMock.items = {
          name: 'John Doe'
        };

        expect(localStorageMock.getItem('name')).to.eql('John Doe');
      });
    });

    context('when passed an invalid key', () => {
      it('returns null', () => {
        expect(localStorageMock.getItem('some invalid key')).to.be.null;
      });
    });

    describe('#setItem', () => {
      context('when not passed any arguments', () => {
        it('throws a TypeError', () => {
          const fn = () => {
            localStorageMock.setItem();
          };

          expect(fn).to.throw(
            TypeError,
            /2 arguments required, but only 0 present/
          )
        });
      });

      context('when passed only 1 argument', () => {
        it('throws a TypeError', () => {
          const fn = () => {
            localStorageMock.setItem('foo');
          };

          expect(fn).to.throw(
            TypeError,
            /2 arguments required, but only 1 present/
          )
        });
      });

      context('when passed valid arguments', () => {
        it('inserts the pair as an item', () => {
          localStorageMock.setItem('year', '2017');

          expect(localStorageMock.items['year']).to.eql('2017');
        });


        it('converts both {key} and {value} into strings before insertion', () => {
          const items = [
            {
              key: [1, 2, 3],
              value: ['a', 'b', 'c']
            },
            {
              key: NaN,
              value: Infinity
            },
            {
              key: { name: 'john'},
              value: { age: 24 }
            },
          ];

          items.forEach(item => {
            const { key, value } = item;
            localStorageMock.setItem(key, value);

            expect(localStorageMock.getItem(String(key))).to.eql(String(value))
          });
        });

        it('increments the value of @length', () => {
          localStorageMock.setItem('name', 'John');
          expect(localStorageMock.length).to.eql(1);

          localStorageMock.setItem('occupation', 'Developer');
          expect(localStorageMock.length).to.eql(2);
        });
      });
    });
  });

  describe('#clear', () => {
    it('empties the items in storage', () => {
      localStorageMock.setItem('name', 'John');
      localStorageMock.setItem('age', '24');
      expect(localStorageMock.items).to.eql({ name: 'John', age: '24' });

      localStorageMock.clear();
      expect(localStorageMock.items).to.eql({});
    });

    it('sets the @length to 0', () => {
      localStorageMock.setItem('name', 'John');
      localStorageMock.setItem('age', '24');
      assert(localStorageMock.length === 2);

      localStorageMock.clear();

      expect(localStorageMock.length).to.eql(0);
    });
  });
});
